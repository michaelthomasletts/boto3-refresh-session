name: Bump version, publish to PyPI, tag, and deploy docs

on:
  push:
    branches: [ main ]
    paths:
      - "boto3_refresh_session/**"
      - "README.md"
      - "doc/brs.png"

permissions:
  contents: write   # needed for pushing commits and tags

jobs:
  bump_version:
    if: |
      !contains(github.event.head_commit.message, '[skip release]') &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    name: Bump Version, Publish to PyPI, tag, and deploy docs
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}

      - name: Install dependencies (no-root)
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --all-groups

      - name: Determine version part to update
        run: |
          VERSION_TYPE="patch"
          MESSAGE=$(git log -1 --pretty=%B)

          if echo "$MESSAGE" | grep -qi '\[major\]'; then
            VERSION_TYPE="major"
          elif echo "$MESSAGE" | grep -qi '\[minor\]'; then
            VERSION_TYPE="minor"
          fi

          echo "Determined VERSION_TYPE=$VERSION_TYPE"
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

      - name: Bump version with Poetry
        run: |
          poetry version $VERSION_TYPE
          echo "NEW_VERSION=$(poetry version -s)" >> $GITHUB_ENV

      - name: Update __version__ in package __init__.py
        run: |
          python - << 'PY'
          import re, subprocess, sys
          from pathlib import Path

          # Get the version Poetry just set in pyproject.toml
          ver = subprocess.check_output(["poetry", "version", "-s"], text=True).strip()

          pkg_init = Path("boto3_refresh_session/__init__.py")
          if not pkg_init.exists():
              print("No __init__.py found; skipping.")
              sys.exit(0)

          text = pkg_init.read_text(encoding="utf-8")

          # Replace existing __version__ line if present
          pattern = re.compile(r'(?m)^(?P<prefix>__version__\s*=\s*)([\'"])(?P<val>.*?)(\2)')
          if pattern.search(text):
              new_text = pattern.sub(lambda m: f"{m.group('prefix')}{m.group(2)}{ver}{m.group(2)}", text, count=1)
          else:
              # Otherwise, try to insert after the last import; fall back to appending
              import_pat = re.compile(r'(?m)^(?:from\s+\S+\s+import\s+.+|import\s+\S+.*)$')
              last_import = None
              for m in import_pat.finditer(text):
                  last_import = m
              if last_import:
                  insert_at = last_import.end()
                  new_text = text[:insert_at] + f"\n__version__ = '{ver}'\n" + text[insert_at:]
              else:
                  new_text = text.rstrip() + f"\n\n__version__ = '{ver}'\n"

          if new_text != text:
              pkg_init.write_text(new_text, encoding="utf-8")
              print(f"Updated __version__ to {ver}")
          else:
              print("No change required.")
          PY

      - name: Commit version bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml boto3_refresh_session/__init__.py || true
          if ! git diff --cached --quiet; then
            git commit -m "bump $VERSION_TYPE version [skip ci]"
            git push origin main
          else
            echo "No changes to commit."
          fi

      - name: Sync local repo to latest
        run: |
          git fetch origin main --tags
          git reset --hard origin/main

      - name: Create tag
        run: |
          VERSION="${NEW_VERSION:-$(poetry version -s)}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists; skipping."
          else
            git tag "$VERSION"
            git push origin "$VERSION"
          fi

      - name: Build wheel and publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry install --no-interaction --all-groups
          poetry build
          poetry publish --no-interaction

      - name: Build Documentation
        run: |
          source .venv/bin/activate
          cd doc/ && make clean && cd ..
          sphinx-build doc _build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/
          force_orphan: true