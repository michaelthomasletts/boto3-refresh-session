name: Version bump and deploy docs

on:
  push:
    branches:
      - main

jobs:
  bump_version:
    name: Bump Version (Main Branch Only)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}  # Use the PAT for push permissions

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install tomlkit

      - name: Bump Version
        run: python bump_version.py patch  # Change to "major" or "minor" as needed

      - name: Commit Version Bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "chore: bump version (patch) [skip ci]"  # <--- Prevents infinite loop
          git push origin main  # Push only the version bump commit

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: bump_version
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      - name: Cache Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock', '**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --all-groups

      - name: Install project
        run: poetry install --no-interaction --all-groups

      - name: Build Documentation
        run: |
          source .venv/bin/activate
          cd doc/ && make clean && cd ..
          sphinx-build doc _build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/
          force_orphan: true